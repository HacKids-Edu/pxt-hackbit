{
    "ESP8266ThingSpeak": "MakeCode extension for ESP8266 Wifi modules and ThinkSpeak website https://thingspeak.com/",
    "ESP8266ThingSpeak.connectThingSpeak": "Connect to ThingSpeak and upload data. It would not upload anything if it failed to connect to Wifi or ThingSpeak.",
    "ESP8266ThingSpeak.connectWifi": "Initialize ESP8266 module and connect it to Wifi router",
    "ESP8266ThingSpeak.isLastUploadSuccessful": "Check if ESP8266 successfully uploaded data to ThingSpeak",
    "ESP8266ThingSpeak.isThingSpeakConnected": "Check if ESP8266 successfully connected to ThingSpeak",
    "ESP8266ThingSpeak.isWifiConnected": "Check if ESP8266 successfully connected to Wifi",
    "ESP8266ThingSpeak.wait": "Wait between uploads",
    "hackbit": "Library for hackbit,  grove micro:bit project board https://www.hackids.com.br",
    "hackbit.buttonLEDState": "Get button LED state [0-1]",
    "hackbit.buttonState": "Get button state [0-1]",
    "hackbit.checkColor": "Read color from I2C APDS9960 Color Sensor",
    "hackbit.collisionSensor": "Get collision sensor state [0-1]",
    "hackbit.color": "Get color from I2C Grove Color Sensor v1.3 (TCS3414CS) or v2.0 (TCS3472)\n[0;65534]",
    "hackbit.CrashButton": "Get crash button state [0-1]",
    "hackbit.detectline": "Get line finder sensor state [0-1]",
    "hackbit.dht11Sensor": "Get dht11 temperature and humidity Value",
    "hackbit.digit_bit": "Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display",
    "hackbit.digit_bit|param|bitAddr": "value of bit number",
    "hackbit.digit_bit|param|dispData": "value of number",
    "hackbit.digit_clear": "Clear the display",
    "hackbit.digit_createDisplay": "Create a new driver Grove - 4-Digit Display",
    "hackbit.digit_createDisplay|param|clkPin": "value of clk pin number",
    "hackbit.digit_createDisplay|param|dataPin": "value of data pin number",
    "hackbit.digit_point": "Turn on or off the colon point on Grove - 4-Digit Display",
    "hackbit.digit_set": "Set the brightness level of display at from 0 to 7",
    "hackbit.digit_set|param|level": "value of brightness light level",
    "hackbit.digit_show": "Show a 4 digits number on display",
    "hackbit.digit_show|param|dispData": "value of number",
    "hackbit.FlameState": "Get flame sensor state [0-1]",
    "hackbit.getJoystick": "get Joystick key",
    "hackbit.GroveJoystick.joyread": "Detect position from Grove - Thumb Joystick",
    "hackbit.GroveJoystick.joyread|param|xPin": "@param yPin",
    "hackbit.hackbitGasRead": "Get Gas Sensor concentration value",
    "hackbit.hackbitLaserState": "Set laser state",
    "hackbit.hackbitMiniFanState": "Set mini fan state",
    "hackbit.hackbitRelayState": "Set relay state",
    "hackbit.hackbitVibrationMotorState": "Set vibration motor state",
    "hackbit.HallState": "Get hall sensor state [0-1]",
    "hackbit.joystickkey": "Converts the key name to a number\nUseful for comparisons",
    "hackbit.ledState": "Set Led state",
    "hackbit.MagneticSwitchState": "Get Magnetic Switch state [0-1]",
    "hackbit.measureDistance": "get distance from Grove ultrasonic range sensor [cm]",
    "hackbit.measureDistance_v2": "(v2) get distance from Grove ultrasonic range sensor [cm]",
    "hackbit.us_sonar": "get distance from ultrasonic range sensor (HC-SR04) [cm|inch|μs|]",
    "hackbit.onGesture": "Do something when a gesture is detected",
    "hackbit.onGesture|param|gesture": "type of gesture to detect",
    "hackbit.onGesture|param|handler": "code to run",
    "hackbit.onJoystick": "Do something when a key is detected by Grove - Thumb Joystick",
    "hackbit.onJoystick|param|handler": "code to run",
    "hackbit.onJoystick|param|key": "type of joystick to detect",
    "hackbit.onJoystick|param|xpin": "@param ypin",
    "hackbit.PIRState": "Get PIR sensor state [0-1]",
    "hackbit.potarValue": "Get analog potentiometer value [0-1023]",
    "hackbit.readColor": "Read color from I2C APDS9960 Color Sensor [0;360]",
    "hackbit.ReadLightIntensity": "Get light intensity(0~100%)",
    "hackbit.ReadLightIntensity|param|lightintensitypin": "describe parameter here, eg: AnalogPin.P1",
    "hackbit.ReadNoise": "Get noise(dB)",
    "hackbit.ReadNoise|param|noisepin": "describe parameter here, eg: AnalogPin.P1, (Loudness Sensor)",
    "hackbit.ReadCapacitiveSoilHumidity": "Get soil moisture(0~100%) [capacitive]",
    "hackbit.ReadCapacitiveSoilHumidity|param|capacitivesoilmoisturepin": "capacitive soil moisture (range: 380~620) pin describe parameter here, eg: AnalogPin.P1",
    "hackbit.ReadSoilHumidity": "Get soil moisture(0~100%)",
    "hackbit.ReadSoilHumidity|param|soilmoisturepin": "describe parameter here, eg: AnalogPin.P1",
    "hackbit.ReadTemperature": "Get temperature value Celsius",
    "hackbit.ReadTemperature|param|temperaturepin": "describe parameter here, eg: AnalogPin.P1",
    "hackbit.rotaryValue": "Get rotary angle sensor [0-300]",
    "hackbit.SwitchState": "Get Switch (P) state [0-1]",
    "hackbit.TiltState": "Get Tilt state [0-1]",
    "hackbit.TouchState": "Get touch sensor state [0-1]",
    "hackbit.UVLevel": "Get UV level value (0~15)",
    "hackbit.UVLevel|param|uvlevelpin": "describe parameter here, eg: AnalogPin.P1",
    "hackbit.VibrationRead": "Get vibration state [0-1]",
    "hackbit.WaterState": "Get water sensor state [0-1]",
    "hackbitIR": "MakeCode extension for IR Kit",
    "hackbitIR.connectIrReceiver": "Connects to the IR receiver module at the specified pin and configures the IR protocol.",
    "hackbitIR.connectIrReceiver|param|pin": "IR receiver pin, eg: DigitalPin.P0",
    "hackbitIR.connectIrReceiver|param|protocol": "IR protocol, eg: IrProtocol.Keyestudio",
    "hackbitIR.connectIrSenderLed": "Connects to the IR-emitting LED at the specified pin.",
    "hackbitIR.connectIrSenderLed|param|pin": "IR LED pin, eg: AnalogPin.P0",
    "hackbitIR.irButton": "Returns the code of the IR button that was pressed last. Returns -1 (IrButton.Any) if no button has been pressed yet.",
    "hackbitIR.irButtonCode": "Returns the command code of a specific IR button.",
    "hackbitIR.irButtonCode|param|button": "the button",
    "hackbitIR.irDatagram": "Returns the IR datagram as 32-bit hexadecimal string.\nThe last received datagram is returned or \"0x00000000\" if no data has been received yet.",
    "hackbitIR.irNec": "Returns an NEC IR datagram as a 32bit hex string.",
    "hackbitIR.irNec|param|address": "an 8bit address, eg. 0",
    "hackbitIR.irNec|param|command": "an 8bit command, eg. 2",
    "hackbitIR.onIrButton": "Do something when a specific button is pressed or released on the remote control.",
    "hackbitIR.onIrButton|param|action": "the trigger action",
    "hackbitIR.onIrButton|param|button": "the button to be checked",
    "hackbitIR.onIrButton|param|handler": "body code to run when the event is raised",
    "hackbitIR.onIrDatagram": "Do something when an IR datagram is received.",
    "hackbitIR.onIrDatagram|param|handler": "body code to run when the event is raised",
    "hackbitIR.sendIrDatagram": "Sends a 32bit IR datagram using the NEC protocol.",
    "hackbitIR.sendIrDatagram|param|hex32bit": "a 32bit hex string, eg: 0x00FF02FD",
    "hackbitIR.wasIrDataReceived": "Returns true if any IR data was received since the last call of this function. False otherwise.",
    "HackbitLCD": "MakeCode extension for LCD Display",
    "HackbitLCD.clearLcd1602": "Clears the LCD1602 completely.",
    "HackbitLCD.clearLcd2004": "Clears the LCD2004 completely.",
    "HackbitLCD.connectLcd": "Connects to the LCD at a given I2C address.\nThe addresses 39 (PCF8574) or 63 (PCF8574A) seem to be widely used.",
    "HackbitLCD.connectLcd|param|i2cAddress": "I2C address of LCD in the range from 0 to 127, eg: 39",
    "HackbitLCD.isLcdConnected": "Returns true if a LCD is connected. False otherwise.",
    "HackbitLCD.position1602": "Turns a LCD position into a number.",
    "HackbitLCD.position1602|param|pos": "the LCD position, eg: LcdPosition1602.Pos1",
    "HackbitLCD.position2004": "Turns a LCD position into a number.",
    "HackbitLCD.position2004|param|pos": "the LCD position, eg: LcdPosition2004.Pos1",
    "HackbitLCD.setLcdBacklight": "Enables or disables the backlight of the LCD.",
    "HackbitLCD.setLcdBacklight|param|backlight": "new state of backlight, eg: LcdBacklight.Off",
    "HackbitLCD.showStringOnLcd1602": "Displays a text on a LCD1602 in the given position range.\nThe text will be cropped if it is longer than the provided length.\nIf there is space left, it will be filled with pad characters.",
    "HackbitLCD.showStringOnLcd1602|param|length": "the maximum space used on the LCD, eg: 16",
    "HackbitLCD.showStringOnLcd1602|param|option": "configures padding and alignment, eg: TextOption.Left",
    "HackbitLCD.showStringOnLcd1602|param|startPosition": "the start position on the LCD, [1 - 32]",
    "HackbitLCD.showStringOnLcd1602|param|text": "the text to show, eg: \"Hack:bit\"",
    "HackbitLCD.showStringOnLcd2004": "Displays a text on a LCD2004 in the given position range.\nThe text will be cropped if it is longer than the provided length.\nIf there is space left, it will be filled with pad characters.",
    "HackbitLCD.showStringOnLcd2004|param|length": "the maximum space used on the LCD, eg: 20",
    "HackbitLCD.showStringOnLcd2004|param|option": "configures padding and alignment, eg: TextOption.Left",
    "HackbitLCD.showStringOnLcd2004|param|startPosition": "the start position on the LCD, [1 - 80]",
    "HackbitLCD.showStringOnLcd2004|param|text": "the text to show, eg: \"Hack:bit\"",
    "hackbitmotors": "MakeCode extension for DC Motor, Steep Motor and Servo Motor",
    "hackbitmotors.GeekServo": "Geek Servo (270°) Grey",
    "hackbitmotors.GeekServo360": "Geek Servo (360°) Orange-Green",
    "hackbitmotors.GeekServo2KG": "GeekServo2KG",
    "hackbitmotors.GeekServo2KG|param|degree": "[0-360] degree of servo; eg: 0, 180, 360",
    "hackbitmotors.GeekServo2KG|param|index": "Servo Channel; eg: S1",
    "hackbitmotors.GeekServo|param|degree": "[-45-225] degree of servo; eg: -45, 90, 225",
    "hackbitmotors.GeekServo|param|index": "Servo Channel; eg: S1",
    "hackbitmotors.MotorRunDelay": "Execute single motors with delay",
    "hackbitmotors.MotorRunDelay|param|delay": "seconde delay to stop; eg: 1",
    "hackbitmotors.MotorRunDelay|param|index": "Motor Index; eg: M1A, M1B, M2A, M2B",
    "hackbitmotors.MotorRunDelay|param|speed": "[-255-255] speed of motor; eg: 150, -150",
    "hackbitmotors.MotorRunDual": "Execute two motors at the same time",
    "hackbitmotors.MotorRunDual|param|motor1": "First Motor; eg: M1A, M1B",
    "hackbitmotors.MotorRunDual|param|motor2": "Second Motor; eg: M2A, M2B",
    "hackbitmotors.MotorRunDual|param|speed1": "[-255-255] speed of motor; eg: 150, -150",
    "hackbitmotors.MotorRunDual|param|speed2": "[-255-255] speed of motor; eg: 150, -150",
    "hackbitmotors.Servo": "Servo Execute",
    "hackbitmotors.Servo|param|degree": "[0-180] degree of servo; eg: 0, 90, 180",
    "hackbitmotors.Servo|param|index": "Servo Channel; eg: S1",
    "hackbitmotors.StpCarMove": "Stepper Car move forward",
    "hackbitmotors.StpCarMove|param|diameter": "diameter of wheel in mm; eg: 48",
    "hackbitmotors.StpCarMove|param|distance": "Distance to move in cm; eg: 10, 20",
    "hackbitmotors.StpCarTurn": "Stepper Car turn by degree",
    "hackbitmotors.StpCarTurn|param|diameter": "diameter of wheel in mm; eg: 48",
    "hackbitmotors.StpCarTurn|param|track": "track width of car; eg: 125",
    "hackbitmotors.StpCarTurn|param|turn": "Degree to turn; eg: 90, 180, 360",
    "hackbitRTCDS1307": "Use this file to define custom functions and blocks.\nRead more at https://makecode.microbit.org/blocks/custom\n\nMakeCode extension for RTC DS1307",
    "hackbitRTCDS1307.DateTime": "set Date and Time",
    "hackbitRTCDS1307.DateTime|param|day": "is the Day will be set, eg: 20",
    "hackbitRTCDS1307.DateTime|param|hour": "is the Hour will be set, eg: 12",
    "hackbitRTCDS1307.DateTime|param|minute": "is the Minute will be set, eg: 31",
    "hackbitRTCDS1307.DateTime|param|month": "is the Month will be set, eg: 10",
    "hackbitRTCDS1307.DateTime|param|second": "is the Second will be set, eg: 19",
    "hackbitRTCDS1307.DateTime|param|year": "is the Year will be set, eg: 2020",
    "hackbitRTCDS1307.getTime": "get time",
    "hackbitRTCDS1307.getWeekday": "get time\n\nget  weekday\n0 means Sunday\n1 means Monday\n2 means Tuesday\n3 means Wednesday\n4 means Thursday\n5 means Friday\n6 means Saturday",
    "hackbitRTCDS1307.setTime": "set time",
    "IrButton": "MakeCode extension for IR Kit",
    "neopixel": "Functions to operate NeoPixel strips.",
    "neopixel.colors": "Gets the RGB value of a known color",
    "neopixel.create": "Create a new NeoPixel driver for `numleds` LEDs.",
    "neopixel.create|param|numleds": "number of leds in the strip, eg: 24,30,60,64",
    "neopixel.create|param|pin": "the pin where the neopixel is connected.",
    "neopixel.hsl": "Converts a hue saturation luminosity value into a RGB color",
    "neopixel.hsl|param|h": "hue from 0 to 360",
    "neopixel.hsl|param|l": "luminosity from 0 to 99",
    "neopixel.hsl|param|s": "saturation from 0 to 99",
    "neopixel.rgb": "Converts red, green, blue channels into a RGB color",
    "neopixel.rgb|param|blue": "value of the blue channel between 0 and 255. eg: 255",
    "neopixel.rgb|param|green": "value of the green channel between 0 and 255. eg: 255",
    "neopixel.rgb|param|red": "value of the red channel between 0 and 255. eg: 255",
    "neopixel.Strip": "A NeoPixel strip",
    "neopixel.Strip.clear": "Turn off all LEDs.\nYou need to call ``show`` to make the changes visible.",
    "neopixel.Strip.easeBrightness": "Apply brightness to current colors using a quadratic easing function.",
    "neopixel.Strip.length": "Gets the number of pixels declared on the strip",
    "neopixel.Strip.power": "Estimates the electrical current (mA) consumed by the current light configuration.",
    "neopixel.Strip.range": "Create a range of LEDs.",
    "neopixel.Strip.range|param|length": "number of LEDs in the range. eg: 4",
    "neopixel.Strip.range|param|start": "offset in the LED strip to start the range",
    "neopixel.Strip.rotate": "Rotate LEDs forward.\nYou need to call ``show`` to make the changes visible.",
    "neopixel.Strip.rotate|param|offset": "number of pixels to rotate forward, eg: 1",
    "neopixel.Strip.setBrightness": "Set the brightness of the strip. This flag only applies to future operation.",
    "neopixel.Strip.setBrightness|param|brightness": "a measure of LED brightness in 0-255. eg: 255",
    "neopixel.Strip.setMatrixColor": "Set LED to a given color (range 0-255 for r, g, b) in a matrix shaped strip \nYou need to call ``show`` to make the changes visible.",
    "neopixel.Strip.setMatrixColor|param|rgb": "RGB color of the LED",
    "neopixel.Strip.setMatrixColor|param|x": "horizontal position",
    "neopixel.Strip.setMatrixColor|param|y": "horizontal position",
    "neopixel.Strip.setMatrixWidthBasic": "Sets the number of pixels in a matrix shaped strip",
    "neopixel.Strip.setMatrixWidthBasic|param|width": "number of pixels in a row",
    "neopixel.Strip.setMatrixWidth": "Sets the number of pixels in a matrix shaped strip",
    "neopixel.Strip.setMatrixWidth|param|chain": "type of matrix",
    "neopixel.Strip.setMatrixWidth|param|rotation": "type of matrix",
    "neopixel.Strip.setMatrixWidth|param|width": "number of pixels in a row",
    "neopixel.Strip.setPin": "Set the pin where the neopixel is connected, defaults to P0.",
    "neopixel.Strip.setPixelColor": "Set LED to a given color (range 0-255 for r, g, b). \nYou need to call ``show`` to make the changes visible.",
    "neopixel.Strip.setPixelColor|param|pixeloffset": "position of the NeoPixel in the strip",
    "neopixel.Strip.setPixelColor|param|rgb": "RGB color of the LED",
    "neopixel.Strip.setPixelWhiteLED": "For NeoPixels with RGB+W LEDs, set the white LED brightness. This only works for RGB+W NeoPixels.",
    "neopixel.Strip.setPixelWhiteLED|param|pixeloffset": "position of the LED in the strip",
    "neopixel.Strip.setPixelWhiteLED|param|white": "brightness of the white LED",
    "neopixel.Strip.shift": "Shift LEDs forward and clear with zeros.\nYou need to call ``show`` to make the changes visible.",
    "neopixel.Strip.shift|param|offset": "number of pixels to shift forward, eg: 1",
    "neopixel.Strip.show": "Send all the changes to the strip.",
    "neopixel.Strip.showBarGraph": "Displays a vertical bar graph based on the `value` and `high` value.\nIf `high` is 0, the chart gets adjusted automatically.",
    "neopixel.Strip.showBarGraph|param|high": "maximum value, eg: 255",
    "neopixel.Strip.showBarGraph|param|value": "current value to plot",
    "neopixel.Strip.showColor": "Shows all LEDs to a given color (range 0-255 for r, g, b).",
    "neopixel.Strip.showColor|param|rgb": "RGB color of the LED",
    "neopixel.Strip.showRainbow": "Shows a rainbow pattern on all LEDs.",
    "neopixel.Strip.showRainbow|param|endHue": "the end hue value for the rainbow, eg: 360",
    "neopixel.Strip.showRainbow|param|startHue": "the start hue value for the rainbow, eg: 1",
    "NeoPixelColors": "MakeCode extension for Neopixel \nWell known colors for a NeoPixel strip",
    "NeoPixelMode": "Different modes for RGB or RGB+W NeoPixel strips",
    "norbi": "Blocks for Norbi\nNorbi is a small humanoid robot with movable arms and legs, and\nan LED matrix to express emotions. A tribute to The Norby Chronicles.  \nAnyone can easily use Norbi through programing and onboard sensors.",
    "norbi.norbiServo": "Servo Execute",
    "norbi.norbiServo|param|degree": "[0-180] degree of servo; eg: 0, 90, 180",
    "norbi.norbiServo|param|index": "Servo Channel; eg: S1"    
}