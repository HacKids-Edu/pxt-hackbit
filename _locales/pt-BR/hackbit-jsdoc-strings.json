{
    "ESP8266ThingSpeak": "Extensão MakeCode para módulos WiFi ESP8266 e ThinkSpeak (https://thingspeak.com)",
    "ESP8266ThingSpeak.connectThingSpeak": "Conecte ao ThingSpeak e faça upload de dados. Isso não funcionará caso a conexão ao Wi-Fi ou ThingSpeak foi falha",
    "ESP8266ThingSpeak.connectWifi": "Inicializar o módulo ESP8266 e conecte-o ao roteador de Wi-Fi",
    "ESP8266ThingSpeak.isLastUploadSuccessful": "Verifique se o ESP8266 carregou os dados com sucesso para ThingSpeak",
    "ESP8266ThingSpeak.isThingSpeakConnected": "Verifique se ESP8266 foi conectado com sucesso ao ThingSpeak",
    "ESP8266ThingSpeak.isWifiConnected": "Verifique se ESP8266 foi conectado com sucesso ao WiFi",
    "ESP8266ThingSpeak.wait": "Espere entre uploads",
    "hackbit": "Biblioteca para hack:bit, placa de expansão para BBC micro:bit https://www.hackids.com.br",
    "hackbit.buttonLEDState": "Obtenha o estado do botão com LED [0-1]",
    "hackbit.buttonState": "Obtenha o estado do botão [0-1]",
    "hackbitsensor.checkColor": "Leia as cores do Sensor de Cor APDS9960 I2C",
    "hackbitsensor.collisionSensor": "Obter estado do sensor de colisão [0-1]",
    "hackbitsensor.color": "Obtenha as cores do I2C Grove Color Sensor v1.3 (TCS3414CS) ou v2.0 (TCS3472) [0;65534]",
    "hackbitsensor.CrashButton": "Obter estado do detector de colisão [0-1]",
    "hackbitsensor.detectline": "Obtenha estado do sensor de localização de linha [0-1]",
    "hackbitsensor.dht11Sensor": "Obter valores do sensor de temperatura e umidade (DHT11)",
    "hackbit.digit_bit": "Mostre um único número (0 a 9) em um dígito especificado do módulo display de 4 dígitos.",
    "hackbit.digit_bit|param|bitAddr": "valor do bit (endereço)",
    "hackbit.digit_bit|param|dispData": "valor do número",
    "hackbit.digit_clear": "Limpar a tela (display)",
    "hackbit.digit_createDisplay": "Novo driver (display 4 dígitos)",
    "hackbit.digit_createDisplay|param|clkPin": "Pino (clk)",
    "hackbit.digit_createDisplay|param|dataPin": "Pino (dados)",
    "hackbit.digit_point": "Ligar ou desligar dois ponto (:) do display de 4 dígitos",
    "hackbit.digit_set": "Defina o nível de brilho da tela de 0 a 7",
    "hackbit.digit_set|param|level": "valor do nível de brilho",
    "hackbit.digit_show": "Mostrar um número de 4 dígitos no display",
    "hackbit.digit_show|param|dispData": "valor do número",
    "hackbitsensor.FlameState": "Obter estado do sensor de chama [0-1]",
    "hackbit.getJoystick": "obter valor aa chave do joystick",
    "hackbit.GroveJoystick.joyread": "Detectar posição do Joystick",
    "hackbit.GroveJoystick.joyread|param|xPin": "@param yPin",
    "hackbitsensor.hackbitGasRead": "Obter valor de concentração do Sensor de Gás",
    "hackbit.hackbitLaserState": "Definir estado do laser",
    "hackbit.hackbitMiniFanState": "Definir estado do mini ventilador",
    "hackbit.hackbitRelayState": "Definir estado do relé",
    "hackbit.hackbitVibrationMotorState": "Definir estado do motor de vibração",
    "hackbitsensor.HallState": "Obter estado do sensor Hall [0-1]",
    "hackbit.joystickkey": "Converte o nome da chave em um número\nÚtil para comparações lógicas",
    "hackbit.ledState": "Definir estado do LED",
    "hackbitsensor.MagneticSwitchState": "Obter estado da chave magnética [0-1]",
    "hackbitsensor.measureDistance": "obter distância do sensor ultrassônico Grove [cm|pol]",
    "hackbitsensor.measureDistance_v2": "(v2) obter distância do sensor ultrassônico Grove [cm|pol]",
    "hackbitsensor.us_sonar": "obter distância do sensor ultrassônico HC-SR04 [cm|pol|ms]",
    "hackbitsensor.onGesture": "Faça algo quando um gesto for detectado",
    "hackbitsensor.onGesture|param|gesture": "tipo de gesto a detectar",
    "hackbitsensor.onGesture|param|handler": "código de execução",
    "hackbit.onJoystick": "Faça algo quando ocorrer algum acionamento no joystick.",
    "hackbit.onJoystick|param|handler": "código de execução",
    "hackbit.onJoystick|param|key": "detectar tipo de joystick",
    "hackbit.onJoystick|param|xpin": "@param ypin",
    "hackbitsensor.PIRState": "Obter estado do sensor de movimento PIR [0-1]",
    "hackbit.potarValue": "Obter valor do potenciômetro analógico [0-1023]",
    "hackbitsensor.readColor": "Obter cor do sensor I2C APDS9960 Color Sensor [0;360]",
    "hackbitsensor.ReadLightIntensity": "Obter valor de intensidade da luz (0~100%)",
    "hackbitsensor.ReadLightIntensity|param|lightintensitypin": "descreva o parâmetro aqui, ex: AnalogPin.P1",
    "hackbitsensor.ReadNoise": "Obter ruído (dB)",
    "hackbitsensor.ReadNoise|param|noisepin": "descreva o parâmetro aqui, por exemplo: AnalogPin.P1 (Sensor de Ruído)",
    "hackbitsensor.ReadCapacitiveSoilHumidity": "Obter valor de umidade do solo(0~100%) [capacitivo]",
    "hackbitsensor.ReadCapacitiveSoilHumidity|param|capacitivesoilmoisturepin": "Sensor capacitivo de umidade (faixa: 380~620) descreva o parâmetro aqui, eg: AnalogPin.P1",
    "hackbitsensor.ReadRaindrop": "Obter valor do detector de chuva(0~100%)",
    "hackbitsensor.ReadRaindrop|param|raindroppin": "descreva o parâmetro aqui (faixa de leitura:0-700), ex: AnalogPin.P1",
    "hackbitsensor.ReadSoilHumidity": "Obter valor de umidade do solo(0~100%)",
    "hackbitsensor.ReadSoilHumidity|param|soilmoisturepin": "descreva o parâmetro aqui, ex: AnalogPin.P1",
    "hackbitsensor.ReadTemperature": "Obter valor da temperatura em Celsius",
    "hackbitsensor.ReadTemperature|param|temperaturepin": "descreva o parâmetro aqui, ex: AnalogPin.P1",
    "hackbit.rotaryValue": "Obter ângulo do sensor de rotação [0-300]",
    "hackbit.SwitchState": "Obter estado da chave (P) [0-1]",
    "hackbit.TiltState": "Obter estado do sensor de inclinação [0-1]",
    "hackbitsensor.TouchState": "Obter estado do sensor de toque [0-1]",
    "hackbitsensor.UVLevel": "Obter nível UV (radiação ultravioleta) (0~15)",
    "hackbitsensor.UVLevel|param|uvlevelpin": "descreva o parâmetro aqui, ex: AnalogPin.P1",
    "hackbitsensor.VibrationRead": "Obter estado do sensor de vibração [0-1] SW-420",
    "hackbitsensor.WaterState": "Obter estado do sensor de água [0-1]",
    "hackbitIR": "Extensão Makecode para Kit IR (Infravermelho)",
    "hackbitIR.connectIrReceiver": "Conecta-se ao módulo receptor de IR no pino especificado e configura o protocolo de IR.",
    "hackbitIR.connectIrReceiver|param|pin": "Pino do receptor IR, ex: DigitalPin.P0",
    "hackbitIR.connectIrReceiver|param|protocol": "Protocolo IR, ex: IrProtocol.Keyestudio",
    "hackbitIR.connectIrSenderLed": "Conecta-se ao LED emissor de infravermelho no pino especificado.",
    "hackbitIR.connectIrSenderLed|param|pin": "Pino do LED IR, ex: AnalogPin.P0",
    "hackbitIR.irButton": "Retorna o código do botão IR que foi pressionado por último. Retorna -1 (IrButton.Any) se nenhum botão foi pressionado ainda.",
    "hackbitIR.irButtonCode": "Retorna o código de comando de um botão IR específico.",
    "hackbitIR.irButtonCode|param|button": "botão",
    "hackbitIR.irDatagram": "Retorna o datagrama IR como string hexadecimal de 32 bits.\nO último datagrama recebido é retornado ou \"0x00000000\" se nenhum dado foi recebido ainda.",
    "hackbitIR.irNec": "Retorna o datagrama IR (NEC) como string hexadecimal de 32bits.",
    "hackbitIR.irNec|param|address": "endereço de 8bits, ex: 0",
    "hackbitIR.irNec|param|command": "comando de 8bits, ex: 2",
    "hackbitIR.onIrButton": "Faça algo quando um botão específico for pressionado ou liberado no controle remoto.",
    "hackbitIR.onIrButton|param|action": "ação de gatilho",
    "hackbitIR.onIrButton|param|button": "botão a ser verificado",
    "hackbitIR.onIrButton|param|handler": "corpo do código a ser executado quando o evento é gerado",
    "hackbitIR.onIrDatagram": "Faça algo quando um datagrama IR for recebido.",
    "hackbitIR.onIrDatagram|param|handler": "corpo do código que é executado quando um evento é gerado",
    "hackbitIR.sendIrDatagram": "Envia um datagrama de 32 bits usando o protocolo NEC.",
    "hackbitIR.sendIrDatagram|param|hex32bit": "uma string hexadecimal de 32bit, ex: 0x00FF02FD",
    "hackbitIR.wasIrDataReceived": "Retorna verdadeiro se algum dado foi recebido pelo sensor IR desde a última chamada desta função. Caso contrário, falso.",
    "HackbitLCD": "Extensão Makecode para Display LCD",
    "HackbitLCD.clearLcd1602": "Limpa o LCD1602 completamente.",
    "HackbitLCD.clearLcd2004": "Limpa o LCD2004 completamente.",
    "HackbitLCD.connectLcd": "Conecta-se ao display LCD em um determinado endereço I2C.\nOs endereços 33, 21, 27 (PCF8574T), 39 (PCF8574) ou 63 (PCF8574A) parecem ser amplamente utilizados.",
    "HackbitLCD.connectLcd|param|i2cAddress": "Endereço I2C do display LCD (faixa de 0 a 127), ex: 39",
    "HackbitLCD.isLcdConnected": "Retorna verdadeiro se um display LCD estiver conectado. Caso contrário, falso.",
    "HackbitLCD.position1602": "Transforma uma posição do display LCD em um número.",
    "HackbitLCD.position1602|param|pos": "posição do display LCD, ex: LcdPosition1602.Pos1",
    "HackbitLCD.position2004": "Transforma uma posição do display LCD em um número.",
    "HackbitLCD.position2004|param|pos": "posição do display LCD, ex: LcdPosition2004.Pos1",
    "HackbitLCD.setLcdBacklight": "Ativa ou desativa a luz de fundo do display LCD.",
    "HackbitLCD.setLcdBacklight|param|backlight": "novo estado de luz de fundo, ex: LcdBacklight.Off",
    "HackbitLCD.showStringOnLcd1602": "Exibe um texto em um display LCD1602 na posição fornecida.\nO texto será cortado se for mais longo do que o comprimento fornecido.\nSe houver espaço restante, ele será preenchido com caracteres.",
    "HackbitLCD.showStringOnLcd1602|param|length": "espaço máximo usado no display LCD, ex: 16",
    "HackbitLCD.showStringOnLcd1602|param|option": "configura preenchimento e alinhamento, ex: TextOption.Left",
    "HackbitLCD.showStringOnLcd1602|param|startPosition": "posição inicial no display LCD, [1 - 32]",
    "HackbitLCD.showStringOnLcd1602|param|text": "texto a ser apresentado, ex: \"Hack:bit\"",
    "HackbitLCD.showStringOnLcd2004": "Exibe um texto em um display LCD2004 na posição fornecida.\nO texto será cortado se for mais longo do que o comprimento fornecido.\nSe houver espaço restante, ele será preenchido com caracteres.",
    "HackbitLCD.showStringOnLcd2004|param|length": "espaço máximo usado no display LCD, ex: 20",
    "HackbitLCD.showStringOnLcd2004|param|option": "configura preenchimento e alinhamento, ex: TextOption.Left",
    "HackbitLCD.showStringOnLcd2004|param|startPosition": "posição inicial no display LCD, [1 - 80]",
    "HackbitLCD.showStringOnLcd2004|param|text": "texto a ser mostrado, ex: \"Hack:bit\"",
    "hackbitmotors": "Extensão Makecode para motores DC, motores de passo e servo motor",
    "hackbitmotors.GeekServo": "Geek Servo (270°) Cinza",
    "hackbitmotors.GeekServo360": "Geek Servo (360°) Laranja-Verde",
    "hackbitmotors.GeekServo2KG": "GeekServo2KG",
    "hackbitmotors.GeekServo2KG|param|degree": "[0-360] grau para servos motor; ex: 0, 180, 360",
    "hackbitmotors.GeekServo2KG|param|index": "Servo motor; ex: S1",
    "hackbitmotors.GeekServo (270°)|param|degree": "[0-270] grau para servo motor (270º); ex: 0, 90, 180, 270",
    "hackbitmotors.GeekServo (270°)|param|index": "Servo motor; ex: S1",
    "hackbitmotors.GeekServo (360°)|param|value": "[0-90] velocidade para servo motor (360º); ex: 0, 90, 180, 275, 360",
    "hackbitmotors.GeekServo (360°)|param|pos": "direção",
    "hackbitmotors.GeekServo (360°)|param|index": "Servo motor; ex: S1",
    "hackbitmotors.MotorRunDelay": "Executar motores individuais com atraso",
    "hackbitmotors.MotorRunDelay|param|delay": "atraso em segundo para parar; ex:1",
    "hackbitmotors.MotorRunDelay|param|index": "Motor; ex: M1A, M1B, M2A, M2B",
    "hackbitmotors.MotorRunDelay|param|speed": "[-255-255] velocidade do motor; ex: 150, -150",
    "hackbitmotors.MotorRunDual": "Execute os dois motores ao mesmo tempo",
    "hackbitmotors.MotorRunDual|param|motor1": "Primeiro Motor; ex: M1A, M1B",
    "hackbitmotors.MotorRunDual|param|motor2": "Segundo motor; ex: M2A, M2B",
    "hackbitmotors.MotorRunDual|param|speed1": "[-255-255] velocidade do motor; ex: 150, -150",
    "hackbitmotors.MotorRunDual|param|speed2": "[-255-255] velocidade do motor; ex: 150, -150",
    "hackbitmotors.Servo": "Servo executar",
    "hackbitmotors.Servo|param|degree": "[0-180] grau do servo motoro; ex: 0, 90, 180",
    "hackbitmotors.Servo|param|index": "Canal do Servo Motor; ex: S1",
    "hackbitmotors.StpCarMove": "Motor de passo, siga em frente",
    "hackbitmotors.StpCarMove|param|diameter": "diâmetro da rodas em mm; ex: 48",
    "hackbitmotors.StpCarMove|param|distance": "Distância a percorrer em cm; ex: 10, 20",
    "hackbitmotors.StpCarTurn": "Motor de passo, girar por grau",
    "hackbitmotors.StpCarTurn|param|diameter": "Diâmetro da roda em milímetros; ex: 48",
    "hackbitmotors.StpCarTurn|param|track": "largura da pista do carro; ex: 125",
    "hackbitmotors.StpCarTurn|param|turn": "Grau para girar; ex: 90, 180, 360",
    "hackbitRTCDS1307": "Use este arquivo para definir funções e blocos personalizados.\nLeia mais em https://makecode.microbit.org/blocks/custom\n\nExtensão MakeCode para RTC DS1307",
    "hackbitRTCDS1307.DateTime": "Definir data e hora",
    "hackbitRTCDS1307.DateTime|param|day": "dia a ser definido, ex: 20",
    "hackbitRTCDS1307.DateTime|param|hour": "hora a ser definida, ex: 12",
    "hackbitRTCDS1307.DateTime|param|minute": "minuto a ser definido, ex: 28",
    "hackbitRTCDS1307.DateTime|param|month": "mês a ser definido, ex: 10",
    "hackbitRTCDS1307.DateTime|param|second": "segundos a ser definido, ex: 19",
    "hackbitRTCDS1307.DateTime|param|year": "ano a ser definido, ex: 2020",
    "hackbitRTCDS1307.getTime": "obter valor de tempo",
    "hackbitRTCDS1307.getWeekday": "obter tempo \n\nobter dia da semana \n0 significa domingo \n1 significa segunda-feira \n2 significa terça-feira \n3 significa quarta-feira \n4 significa quinta-feira \n5 significa sexta-feira \n6 significa sábado",
    "hackbitRTCDS1307.setTime": "Definir tempo",
    "IrButton": "Extensão Makecode para Kit IR (infravermelho)",
    "neopixel": "Funções para controlar fitas NeoPixel.",
    "neopixel.colors": "Obtém o valor RGB de uma cor conhecida",
    "neopixel.create": "Criar novo driver NeoPixel para `numleds` LEDs",
    "neopixel.create|param|numleds": "número de LEDS na fita, ex: 24,30,60,64",
    "neopixel.create|param|pin": "pino onde está conectado NeoPixel.",
    "neopixel.hsl": "Converte um valor de luminosidade de saturação de matiz (HUE) em uma cor RGB",
    "neopixel.hsl|param|h": "Matiz de 0 a 360",
    "neopixel.hsl|param|l": "Luminosidade de 0 a 99",
    "neopixel.hsl|param|s": "Saturação de 0 a 99",
    "neopixel.rgb": "Converte canais vermelhos, verdes e azuis em uma cor RGB.",
    "neopixel.rgb|param|blue": "valor do canal azul entre 0 e 255. ex.: 255",
    "neopixel.rgb|param|green": "valor do canal verde entre 0 e 255. ex.: 255",
    "neopixel.rgb|param|red": "valor do canal vermelho entre 0 e 255. ex.: 255",
    "neopixel.Strip": "Uma tira de NeoPixel",
    "neopixel.Strip.clear": "Você precisa adicionar ``mostrar`` para tornar as alterações visíveis.",
    "neopixel.Strip.easeBrightness": "Aplique brilho às cores atuais usando uma função de atenuação quadrática.",
    "neopixel.Strip.length": "Obtém o número de pixels declarado na faixa (strip)",
    "neopixel.Strip.power": "Estima a corrente elétrica (mA) consumida pela configuração de luz atual",
    "neopixel.Strip.range": "Criar uma variedade de LEDs",    
    "neopixel.Strip.range|param|length": "Número de LEDs no intervalo. ex: 4",
    "neopixel.Strip.range|param|start": "deslocamento na faixa de LED para iniciar o intervalo.",
    "neopixel.Strip.rotate": "Gire LEDs para frente \nVocê precisa chamar ``show`` para tornar as alterações visíveis",
    "neopixel.Strip.rotate|param|offset": "número de pixels para girar para frente, ex: 1",
    "neopixel.Strip.setBrightness": "Defina o brilho da tira NeoPixel. Este sinalizador se aplica apenas a operações futuras.",
    "neopixel.Strip.setBrightness|param|brightness": "medida de brilho do LED em 0-255. ex: 255",
    "neopixel.Strip.setMatrixColor": "Defina o valor de LED NeoPixel para uma determinada cor (intervalo 0-255 para r, g, b)\nVocê precisa executar ``mostrar`` para tornar as alterações visíveis.",
    "neopixel.Strip.setMatrixColor|param|rgb": "Cor RGB do LED",
    "neopixel.Strip.setMatrixColor|param|x": "posição horizontal",
    "neopixel.Strip.setMatrixColor|param|y": "Posição horizontal",
    "neopixel.Strip.setMatrixWidthBasic": "Define o número de pixels em uma fita NeoPixel em forma de matriz",
    "neopixel.Strip.setMatrixWidthBasic|param|width": "Número de pixel na linha",
    "neopixel.Strip.setMatrixWidth": "Define o número de pixels em uma fita NeoPixel em forma de matriz",
    "neopixel.Strip.setMatrixWidth|param|chain": "tipo de matriz",
    "neopixel.Strip.setMatrixWidth|param|rotation": "Tipo de matriz",
    "neopixel.Strip.setMatrixWidth|param|width": "Número de pixel na linha",
    "neopixel.Strip.setPin": "Defina o pino onde o NeoPixel está conectado, o padrão é P0.",
    "neopixel.Strip.setPixelColor": "Defina o valor do LED para uma determinada cor (intervalo 0-255 para r, g, b).\nVocê precisa adicionar ``mostrar`` para tornar as alterações visíveis.",
    "neopixel.Strip.setPixelColor|param|pixeloffset": "posição da NeoPixel na fita",
    "neopixel.Strip.setPixelColor|param|rgb": "Cor RGB do LED",
    "neopixel.Strip.setPixelWhiteLED": "Para NeoPixels com LEDs RGB+W, defina o brilho do LED branco. Isso só funciona para NeoPixel RGB+W.",
    "neopixel.Strip.setPixelWhiteLED|param|pixeloffset": "posição do LED na faixa",
    "neopixel.Strip.setPixelWhiteLED|param|white": "brilho do LED branco",
    "neopixel.Strip.shift": "Deslocar os LEDs para frente e apague-os com zeros.\nVocê precisa adicionar ``mostrar`` para tornar as alterações visíveis.",
    "neopixel.Strip.shift|param|offset": "número de pixels para avançar, ex: 1",
    "neopixel.Strip.show": "Envie todas as mudanças para a tira",
    "neopixel.Strip.showBarGraph": "Exibe um gráfico de barras verticais com base no valor `value` e `high`. \nSe `high` for 0, o gráfico será ajustado automaticamente.",    
    "neopixel.Strip.showBarGraph|param|high": "valor máximo, ex.: 255",
    "neopixel.Strip.showBarGraph|param|value": "valor atual para traçar (plot)",
    "neopixel.Strip.showColor": "Mostra todo os LED para uma determinada cor (intervalo 0-255 para r, g, b).",
    "neopixel.Strip.showColor|param|rgb": "Cor RGB (red, green, blue) do LED",
    "neopixel.Strip.showRainbow": "Mostre um padrão de arco-íris em todos os LEDs",
    "neopixel.Strip.showRainbow|param|endHue": "o valor de matiz final para o arco-íris, ex.: 360",
    "neopixel.Strip.showRainbow|param|startHue": "o valor inicial de matiz para o arco-íris, ex.: 1",
    "NeoPixelColors": "Extensão Makecode para NeoPixel",
    "NeoPixelMode": "Modos diferentes para NeoPixel RGB ou NeoPixel RGB+W",
    "norbi": "Blocos para Norbi \nNorbi é um pequeno robô humanoide com braços e pernas móveis e uma matriz de LED para expressar emoções. Uma homenagem a The Norby Chronicles. \nQualquer pessoa pode usar o Norbi facilmente por meio da programação e dos sensores integrados.",
    "norbi.norbiServo": "Executar servo motor",
    "norbi.norbiServo|param|degree": "[0-180] grau do servo motor; ex: 0, 90, 180",
    "norbi.norbiServo|param|index": "Canal do servo; ex: S1"
}